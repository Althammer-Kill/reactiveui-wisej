// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated with Pharmacist version: 2.0.8+ea3bd63e74
// Assemblies included: C:\Program Files\IceTeaGroup\Wisej 2\bin\Wisej.Framework.dll

using global::System;
using global::System.Reactive;
using global::System.Reactive.Linq;
using global::System.Reactive.Subjects;
using global::Pharmacist.Common;

namespace Microsoft.Ajax.Utilities
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Microsoft.Ajax.Utilities"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.CssParser"/> class.
        /// </summary>
        public static RxCssParserEvents Events(this global::Microsoft.Ajax.Utilities.CssParser item) => new RxCssParserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.JSParser"/> class.
        /// </summary>
        public static RxJSParserEvents Events(this global::Microsoft.Ajax.Utilities.JSParser item) => new RxJSParserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.JSScanner"/> class.
        /// </summary>
        public static RxJSScannerEvents Events(this global::Microsoft.Ajax.Utilities.JSScanner item) => new RxJSScannerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser"/> class.
        /// </summary>
        public static RxSwitchParserEvents Events(this global::Microsoft.Ajax.Utilities.SwitchParser item) => new RxSwitchParserEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.CssParser"/> class as observables.
    /// </summary>
    public class RxCssParserEvents
    {
        private readonly global::Microsoft.Ajax.Utilities.CssParser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Ajax.Utilities.CssParser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCssParserEvents(global::Microsoft.Ajax.Utilities.CssParser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.CssParser.CssError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.ContextErrorEventArgs> CssError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.ContextErrorEventArgs>, global::Microsoft.Ajax.Utilities.ContextErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.ContextErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CssError += x, x => _data.CssError -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.JSParser"/> class as observables.
    /// </summary>
    public class RxJSParserEvents
    {
        private readonly global::Microsoft.Ajax.Utilities.JSParser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Ajax.Utilities.JSParser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJSParserEvents(global::Microsoft.Ajax.Utilities.JSParser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.JSParser.CompilerError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.ContextErrorEventArgs> CompilerError => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.ContextErrorEventArgs>, global::Microsoft.Ajax.Utilities.ContextErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.ContextErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CompilerError += x, x => _data.CompilerError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.JSParser.UndefinedReference"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs> UndefinedReference => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs>, global::Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.UndefinedReferenceEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UndefinedReference += x, x => _data.UndefinedReference -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.JSScanner"/> class as observables.
    /// </summary>
    public class RxJSScannerEvents
    {
        private readonly global::Microsoft.Ajax.Utilities.JSScanner _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Ajax.Utilities.JSScanner"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxJSScannerEvents(global::Microsoft.Ajax.Utilities.JSScanner data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.JSScanner.GlobalDefine"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.GlobalDefineEventArgs> GlobalDefine => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.GlobalDefineEventArgs>, global::Microsoft.Ajax.Utilities.GlobalDefineEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.GlobalDefineEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GlobalDefine += x, x => _data.GlobalDefine -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.JSScanner.NewModule"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.NewModuleEventArgs> NewModule => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.NewModuleEventArgs>, global::Microsoft.Ajax.Utilities.NewModuleEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.NewModuleEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NewModule += x, x => _data.NewModule -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser"/> class as observables.
    /// </summary>
    public class RxSwitchParserEvents
    {
        private readonly global::Microsoft.Ajax.Utilities.SwitchParser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSwitchParserEvents(global::Microsoft.Ajax.Utilities.SwitchParser data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser.CssOnlyParameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CssOnlyParameter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CssOnlyParameter += x, x => _data.CssOnlyParameter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser.InvalidSwitch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.InvalidSwitchEventArgs> InvalidSwitch => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.InvalidSwitchEventArgs>, global::Microsoft.Ajax.Utilities.InvalidSwitchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.InvalidSwitchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.InvalidSwitch += x, x => _data.InvalidSwitch -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser.JSOnlyParameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> JSOnlyParameter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.JSOnlyParameter += x, x => _data.JSOnlyParameter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Microsoft.Ajax.Utilities.SwitchParser.UnknownParameter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Microsoft.Ajax.Utilities.UnknownParameterEventArgs> UnknownParameter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler<global::Microsoft.Ajax.Utilities.UnknownParameterEventArgs>, global::Microsoft.Ajax.Utilities.UnknownParameterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Microsoft.Ajax.Utilities.UnknownParameterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UnknownParameter += x, x => _data.UnknownParameter -= x);
    }
}

namespace Wisej.Base
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Wisej.Base"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Base.Component"/> class.
        /// </summary>
        public static RxComponentEvents Events(this global::Wisej.Base.Component item) => new RxComponentEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Base.ControlBase"/> class.
        /// </summary>
        public static RxControlBaseEvents Events(this global::Wisej.Base.ControlBase item) => new RxControlBaseEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Base.Component"/> class as observables.
    /// </summary>
    public class RxComponentEvents
    {
        private readonly global::Wisej.Base.Component _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Base.Component"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComponentEvents(global::Wisej.Base.Component data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.Component.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Base.ControlBase"/> class as observables.
    /// </summary>
    public class RxControlBaseEvents
    {
        private readonly global::Wisej.Base.ControlBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Base.ControlBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlBaseEvents(global::Wisej.Base.ControlBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.ContextMenuStripChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuStripChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuStripChanged += x, x => _data.ContextMenuStripChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.DpiChangedAfterParent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DpiChangedAfterParent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChangedAfterParent += x, x => _data.DpiChangedAfterParent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.DpiChangedBeforeParent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DpiChangedBeforeParent => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DpiChangedBeforeParent += x, x => _data.DpiChangedBeforeParent -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.DragEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnd += x, x => _data.DragEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.DragStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStart += x, x => _data.DragStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.RegionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RegionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RegionChanged += x, x => _data.RegionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Base.ControlBase.SystemColorsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SystemColorsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SystemColorsChanged += x, x => _data.SystemColorsChanged -= x);
    }
}

namespace Wisej.Core
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Wisej.Core"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Core.IWisejComponent"/> class.
        /// </summary>
        public static RxIWisejComponentEvents Events(this global::Wisej.Core.IWisejComponent item) => new RxIWisejComponentEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Core.IWisejComponent"/> class as observables.
    /// </summary>
    public class RxIWisejComponentEvents
    {
        private readonly global::Wisej.Core.IWisejComponent _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Core.IWisejComponent"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIWisejComponentEvents(global::Wisej.Core.IWisejComponent data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Core.IWisejComponent.Updated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Updated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Updated += x, x => _data.Updated -= x);
    }
}

namespace Wisej.Web
{
    /// <summary>
    /// A class that contains extension methods to wrap events for classes contained within the <see cref = "Wisej.Web"/> namespace.
    /// </summary>
    public static class EventExtensions
    {
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Accordion"/> class.
        /// </summary>
        public static RxAccordionEvents Events(this global::Wisej.Web.Accordion item) => new RxAccordionEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.AccordionPanel"/> class.
        /// </summary>
        public static RxAccordionPanelEvents Events(this global::Wisej.Web.AccordionPanel item) => new RxAccordionPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Animation"/> class.
        /// </summary>
        public static RxAnimationEvents Events(this global::Wisej.Web.Animation item) => new RxAnimationEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Binding"/> class.
        /// </summary>
        public static RxBindingEvents Events(this global::Wisej.Web.Binding item) => new RxBindingEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.BindingManagerBase"/> class.
        /// </summary>
        public static RxBindingManagerBaseEvents Events(this global::Wisej.Web.BindingManagerBase item) => new RxBindingManagerBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.BindingNavigator"/> class.
        /// </summary>
        public static RxBindingNavigatorEvents Events(this global::Wisej.Web.BindingNavigator item) => new RxBindingNavigatorEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.BindingSource"/> class.
        /// </summary>
        public static RxBindingSourceEvents Events(this global::Wisej.Web.BindingSource item) => new RxBindingSourceEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Button"/> class.
        /// </summary>
        public static RxButtonEvents Events(this global::Wisej.Web.Button item) => new RxButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Canvas"/> class.
        /// </summary>
        public static RxCanvasEvents Events(this global::Wisej.Web.Canvas item) => new RxCanvasEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.CheckBox"/> class.
        /// </summary>
        public static RxCheckBoxEvents Events(this global::Wisej.Web.CheckBox item) => new RxCheckBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.CheckedListBox"/> class.
        /// </summary>
        public static RxCheckedListBoxEvents Events(this global::Wisej.Web.CheckedListBox item) => new RxCheckedListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ComboBox"/> class.
        /// </summary>
        public static RxComboBoxEvents Events(this global::Wisej.Web.ComboBox item) => new RxComboBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.CommonDialog"/> class.
        /// </summary>
        public static RxCommonDialogEvents Events(this global::Wisej.Web.CommonDialog item) => new RxCommonDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ContainerControl"/> class.
        /// </summary>
        public static RxContainerControlEvents Events(this global::Wisej.Web.ContainerControl item) => new RxContainerControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ContextMenu"/> class.
        /// </summary>
        public static RxContextMenuEvents Events(this global::Wisej.Web.ContextMenu item) => new RxContextMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Control"/> class.
        /// </summary>
        public static RxControlEvents Events(this global::Wisej.Web.Control item) => new RxControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.CurrencyManager"/> class.
        /// </summary>
        public static RxCurrencyManagerEvents Events(this global::Wisej.Web.CurrencyManager item) => new RxCurrencyManagerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DataGridView"/> class.
        /// </summary>
        public static RxDataGridViewEvents Events(this global::Wisej.Web.DataGridView item) => new RxDataGridViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DataGridViewColumn"/> class.
        /// </summary>
        public static RxDataGridViewColumnEvents Events(this global::Wisej.Web.DataGridViewColumn item) => new RxDataGridViewColumnEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DataGridViewComboBoxCell"/> class.
        /// </summary>
        public static RxDataGridViewComboBoxCellEvents Events(this global::Wisej.Web.DataGridViewComboBoxCell item) => new RxDataGridViewComboBoxCellEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DataRepeater"/> class.
        /// </summary>
        public static RxDataRepeaterEvents Events(this global::Wisej.Web.DataRepeater item) => new RxDataRepeaterEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DataRepeaterItem"/> class.
        /// </summary>
        public static RxDataRepeaterItemEvents Events(this global::Wisej.Web.DataRepeaterItem item) => new RxDataRepeaterItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DateTimePicker"/> class.
        /// </summary>
        public static RxDateTimePickerEvents Events(this global::Wisej.Web.DateTimePicker item) => new RxDateTimePickerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Desktop"/> class.
        /// </summary>
        public static RxDesktopEvents Events(this global::Wisej.Web.Desktop item) => new RxDesktopEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.DomainUpDown"/> class.
        /// </summary>
        public static RxDomainUpDownEvents Events(this global::Wisej.Web.DomainUpDown item) => new RxDomainUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ErrorProvider"/> class.
        /// </summary>
        public static RxErrorProviderEvents Events(this global::Wisej.Web.ErrorProvider item) => new RxErrorProviderEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.FileDialog"/> class.
        /// </summary>
        public static RxFileDialogEvents Events(this global::Wisej.Web.FileDialog item) => new RxFileDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.FlashPlayer"/> class.
        /// </summary>
        public static RxFlashPlayerEvents Events(this global::Wisej.Web.FlashPlayer item) => new RxFlashPlayerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.FlowLayoutPanel"/> class.
        /// </summary>
        public static RxFlowLayoutPanelEvents Events(this global::Wisej.Web.FlowLayoutPanel item) => new RxFlowLayoutPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.FolderBrowserDialog"/> class.
        /// </summary>
        public static RxFolderBrowserDialogEvents Events(this global::Wisej.Web.FolderBrowserDialog item) => new RxFolderBrowserDialogEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Form"/> class.
        /// </summary>
        public static RxFormEvents Events(this global::Wisej.Web.Form item) => new RxFormEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.GroupBox"/> class.
        /// </summary>
        public static RxGroupBoxEvents Events(this global::Wisej.Web.GroupBox item) => new RxGroupBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.HtmlPanel"/> class.
        /// </summary>
        public static RxHtmlPanelEvents Events(this global::Wisej.Web.HtmlPanel item) => new RxHtmlPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.IFramePanel"/> class.
        /// </summary>
        public static RxIFramePanelEvents Events(this global::Wisej.Web.IFramePanel item) => new RxIFramePanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Label"/> class.
        /// </summary>
        public static RxLabelEvents Events(this global::Wisej.Web.Label item) => new RxLabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Line"/> class.
        /// </summary>
        public static RxLineEvents Events(this global::Wisej.Web.Line item) => new RxLineEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.LinkLabel"/> class.
        /// </summary>
        public static RxLinkLabelEvents Events(this global::Wisej.Web.LinkLabel item) => new RxLinkLabelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.LinkMenuItem"/> class.
        /// </summary>
        public static RxLinkMenuItemEvents Events(this global::Wisej.Web.LinkMenuItem item) => new RxLinkMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ListBox"/> class.
        /// </summary>
        public static RxListBoxEvents Events(this global::Wisej.Web.ListBox item) => new RxListBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ListControl"/> class.
        /// </summary>
        public static RxListControlEvents Events(this global::Wisej.Web.ListControl item) => new RxListControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ListView"/> class.
        /// </summary>
        public static RxListViewEvents Events(this global::Wisej.Web.ListView item) => new RxListViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.MainMenu"/> class.
        /// </summary>
        public static RxMainMenuEvents Events(this global::Wisej.Web.MainMenu item) => new RxMainMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.MaskedTextBox"/> class.
        /// </summary>
        public static RxMaskedTextBoxEvents Events(this global::Wisej.Web.MaskedTextBox item) => new RxMaskedTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Media"/> class.
        /// </summary>
        public static RxMediaEvents Events(this global::Wisej.Web.Media item) => new RxMediaEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Menu"/> class.
        /// </summary>
        public static RxMenuEvents Events(this global::Wisej.Web.Menu item) => new RxMenuEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.MenuBar"/> class.
        /// </summary>
        public static RxMenuBarEvents Events(this global::Wisej.Web.MenuBar item) => new RxMenuBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.MenuItem"/> class.
        /// </summary>
        public static RxMenuItemEvents Events(this global::Wisej.Web.MenuItem item) => new RxMenuItemEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.MonthCalendar"/> class.
        /// </summary>
        public static RxMonthCalendarEvents Events(this global::Wisej.Web.MonthCalendar item) => new RxMonthCalendarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.NumericUpDown"/> class.
        /// </summary>
        public static RxNumericUpDownEvents Events(this global::Wisej.Web.NumericUpDown item) => new RxNumericUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Page"/> class.
        /// </summary>
        public static RxPageEvents Events(this global::Wisej.Web.Page item) => new RxPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Panel"/> class.
        /// </summary>
        public static RxPanelEvents Events(this global::Wisej.Web.Panel item) => new RxPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.PdfViewer"/> class.
        /// </summary>
        public static RxPdfViewerEvents Events(this global::Wisej.Web.PdfViewer item) => new RxPdfViewerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.PictureBox"/> class.
        /// </summary>
        public static RxPictureBoxEvents Events(this global::Wisej.Web.PictureBox item) => new RxPictureBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ProgressBar"/> class.
        /// </summary>
        public static RxProgressBarEvents Events(this global::Wisej.Web.ProgressBar item) => new RxProgressBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.PropertyGrid"/> class.
        /// </summary>
        public static RxPropertyGridEvents Events(this global::Wisej.Web.PropertyGrid item) => new RxPropertyGridEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.RadioButton"/> class.
        /// </summary>
        public static RxRadioButtonEvents Events(this global::Wisej.Web.RadioButton item) => new RxRadioButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ScrollableControl"/> class.
        /// </summary>
        public static RxScrollableControlEvents Events(this global::Wisej.Web.ScrollableControl item) => new RxScrollableControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ScrollBar"/> class.
        /// </summary>
        public static RxScrollBarEvents Events(this global::Wisej.Web.ScrollBar item) => new RxScrollBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Shape"/> class.
        /// </summary>
        public static RxShapeEvents Events(this global::Wisej.Web.Shape item) => new RxShapeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.SlideBar"/> class.
        /// </summary>
        public static RxSlideBarEvents Events(this global::Wisej.Web.SlideBar item) => new RxSlideBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Spacer"/> class.
        /// </summary>
        public static RxSpacerEvents Events(this global::Wisej.Web.Spacer item) => new RxSpacerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.SplitContainer"/> class.
        /// </summary>
        public static RxSplitContainerEvents Events(this global::Wisej.Web.SplitContainer item) => new RxSplitContainerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.SplitterPanel"/> class.
        /// </summary>
        public static RxSplitterPanelEvents Events(this global::Wisej.Web.SplitterPanel item) => new RxSplitterPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.StatusBar"/> class.
        /// </summary>
        public static RxStatusBarEvents Events(this global::Wisej.Web.StatusBar item) => new RxStatusBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.StatusBarPanel"/> class.
        /// </summary>
        public static RxStatusBarPanelEvents Events(this global::Wisej.Web.StatusBarPanel item) => new RxStatusBarPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TabControl"/> class.
        /// </summary>
        public static RxTabControlEvents Events(this global::Wisej.Web.TabControl item) => new RxTabControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TableLayoutPanel"/> class.
        /// </summary>
        public static RxTableLayoutPanelEvents Events(this global::Wisej.Web.TableLayoutPanel item) => new RxTableLayoutPanelEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TabPage"/> class.
        /// </summary>
        public static RxTabPageEvents Events(this global::Wisej.Web.TabPage item) => new RxTabPageEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TagTextBox"/> class.
        /// </summary>
        public static RxTagTextBoxEvents Events(this global::Wisej.Web.TagTextBox item) => new RxTagTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TextBox"/> class.
        /// </summary>
        public static RxTextBoxEvents Events(this global::Wisej.Web.TextBox item) => new RxTextBoxEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TextBoxBase"/> class.
        /// </summary>
        public static RxTextBoxBaseEvents Events(this global::Wisej.Web.TextBoxBase item) => new RxTextBoxBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Timer"/> class.
        /// </summary>
        public static RxTimerEvents Events(this global::Wisej.Web.Timer item) => new RxTimerEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TimeUpDown"/> class.
        /// </summary>
        public static RxTimeUpDownEvents Events(this global::Wisej.Web.TimeUpDown item) => new RxTimeUpDownEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Toast"/> class.
        /// </summary>
        public static RxToastEvents Events(this global::Wisej.Web.Toast item) => new RxToastEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ToolBar"/> class.
        /// </summary>
        public static RxToolBarEvents Events(this global::Wisej.Web.ToolBar item) => new RxToolBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.ToolBarButton"/> class.
        /// </summary>
        public static RxToolBarButtonEvents Events(this global::Wisej.Web.ToolBarButton item) => new RxToolBarButtonEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TrackBar"/> class.
        /// </summary>
        public static RxTrackBarEvents Events(this global::Wisej.Web.TrackBar item) => new RxTrackBarEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TreeNode"/> class.
        /// </summary>
        public static RxTreeNodeEvents Events(this global::Wisej.Web.TreeNode item) => new RxTreeNodeEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.TreeView"/> class.
        /// </summary>
        public static RxTreeViewEvents Events(this global::Wisej.Web.TreeView item) => new RxTreeViewEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.UpDownBase"/> class.
        /// </summary>
        public static RxUpDownBaseEvents Events(this global::Wisej.Web.UpDownBase item) => new RxUpDownBaseEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Upload"/> class.
        /// </summary>
        public static RxUploadEvents Events(this global::Wisej.Web.Upload item) => new RxUploadEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.UserControl"/> class.
        /// </summary>
        public static RxUserControlEvents Events(this global::Wisej.Web.UserControl item) => new RxUserControlEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.UserPopup"/> class.
        /// </summary>
        public static RxUserPopupEvents Events(this global::Wisej.Web.UserPopup item) => new RxUserPopupEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.WebBrowser"/> class.
        /// </summary>
        public static RxWebBrowserEvents Events(this global::Wisej.Web.WebBrowser item) => new RxWebBrowserEvents(item);
        /// <summary>
        /// A wrapper class which wraps all the events contained within the <see cref = "global::Wisej.Web.Widget"/> class.
        /// </summary>
        public static RxWidgetEvents Events(this global::Wisej.Web.Widget item) => new RxWidgetEvents(item);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Accordion"/> class as observables.
    /// </summary>
    public class RxAccordionEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Accordion _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Accordion"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAccordionEvents(global::Wisej.Web.Accordion data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.Deselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AccordionEventArgs> Deselected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AccordionEventHandler, global::Wisej.Web.AccordionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AccordionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselected += x, x => _data.Deselected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.Deselecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AccordionCancelEventArgs> Deselecting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AccordionCancelEventHandler, global::Wisej.Web.AccordionCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AccordionCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselecting += x, x => _data.Deselecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AccordionEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AccordionEventHandler, global::Wisej.Web.AccordionEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AccordionEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.Selecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AccordionCancelEventArgs> Selecting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AccordionCancelEventHandler, global::Wisej.Web.AccordionCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AccordionCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selecting += x, x => _data.Selecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Accordion.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.AccordionPanel"/> class as observables.
    /// </summary>
    public class RxAccordionPanelEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.AccordionPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.AccordionPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAccordionPanelEvents(global::Wisej.Web.AccordionPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.AccordionPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.AccordionPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.AccordionPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.AccordionPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.AccordionPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Animation"/> class as observables.
    /// </summary>
    public class RxAnimationEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.Animation _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Animation"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxAnimationEvents(global::Wisej.Web.Animation data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Animation.End"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AnimationEventArgs> End => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AnimationEventHandler, global::Wisej.Web.AnimationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AnimationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.End += x, x => _data.End -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Animation.Start"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AnimationEventArgs> Start => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AnimationEventHandler, global::Wisej.Web.AnimationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AnimationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Start += x, x => _data.Start -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Binding"/> class as observables.
    /// </summary>
    public class RxBindingEvents
    {
        private readonly global::Wisej.Web.Binding _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Binding"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingEvents(global::Wisej.Web.Binding data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Binding.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.BindingCompleteEventHandler, global::Wisej.Web.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Binding.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ConvertEventHandler, global::Wisej.Web.ConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Format += x, x => _data.Format -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Binding.Parse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ConvertEventArgs> Parse => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ConvertEventHandler, global::Wisej.Web.ConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Parse += x, x => _data.Parse -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.BindingManagerBase"/> class as observables.
    /// </summary>
    public class RxBindingManagerBaseEvents
    {
        private readonly global::Wisej.Web.BindingManagerBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.BindingManagerBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingManagerBaseEvents(global::Wisej.Web.BindingManagerBase data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingManagerBase.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.BindingCompleteEventHandler, global::Wisej.Web.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingManagerBase.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingManagerBase.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingManagerBase.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.BindingManagerDataErrorEventHandler, global::Wisej.Web.BindingManagerDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.BindingManagerDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingManagerBase.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.BindingNavigator"/> class as observables.
    /// </summary>
    public class RxBindingNavigatorEvents : global::Wisej.Web.RxFlowLayoutPanelEvents
    {
        private readonly global::Wisej.Web.BindingNavigator _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.BindingNavigator"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingNavigatorEvents(global::Wisej.Web.BindingNavigator data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingNavigator.PanelCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelCollapsed += x, x => _data.PanelCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingNavigator.PanelExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelExpanded += x, x => _data.PanelExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingNavigator.RefreshItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RefreshItems => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RefreshItems += x, x => _data.RefreshItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingNavigator.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.BindingSource"/> class as observables.
    /// </summary>
    public class RxBindingSourceEvents
    {
        private readonly global::Wisej.Web.BindingSource _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.BindingSource"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxBindingSourceEvents(global::Wisej.Web.BindingSource data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.BindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.BindingCompleteEventArgs> BindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.BindingCompleteEventHandler, global::Wisej.Web.BindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.BindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingComplete += x, x => _data.BindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.CurrentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentChanged += x, x => _data.CurrentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.CurrentItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentItemChanged += x, x => _data.CurrentItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.BindingManagerDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.BindingManagerDataErrorEventHandler, global::Wisej.Web.BindingManagerDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.BindingManagerDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.BindingSource.PositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PositionChanged += x, x => _data.PositionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Button"/> class as observables.
    /// </summary>
    public class RxButtonEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Button _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Button"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxButtonEvents(global::Wisej.Web.Button data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Button.ItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuButtonItemClickedEventArgs> ItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuButtonItemClickedEventHandler, global::Wisej.Web.MenuButtonItemClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuButtonItemClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemClicked += x, x => _data.ItemClicked -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Canvas"/> class as observables.
    /// </summary>
    public class RxCanvasEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Canvas _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Canvas"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCanvasEvents(global::Wisej.Web.Canvas data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.Redraw"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Redraw => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Redraw += x, x => _data.Redraw -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Canvas.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.CheckBox"/> class as observables.
    /// </summary>
    public class RxCheckBoxEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.CheckBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.CheckBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCheckBoxEvents(global::Wisej.Web.CheckBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckBox.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckBox.CheckStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckStateChanged += x, x => _data.CheckStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckBox.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.CheckedListBox"/> class as observables.
    /// </summary>
    public class RxCheckedListBoxEvents : global::Wisej.Web.RxListBoxEvents
    {
        private readonly global::Wisej.Web.CheckedListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.CheckedListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCheckedListBoxEvents(global::Wisej.Web.CheckedListBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckedListBox.AfterItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemCheckEventArgs> AfterItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemCheckEventHandler, global::Wisej.Web.ItemCheckEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemCheckEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterItemCheck += x, x => _data.AfterItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckedListBox.CheckStateMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckStateMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckStateMemberChanged += x, x => _data.CheckStateMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckedListBox.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckedListBox.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemCheckEventHandler, global::Wisej.Web.ItemCheckEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemCheckEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCheck += x, x => _data.ItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CheckedListBox.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ComboBox"/> class as observables.
    /// </summary>
    public class RxComboBoxEvents : global::Wisej.Web.RxListControlEvents
    {
        private readonly global::Wisej.Web.ComboBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ComboBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxComboBoxEvents(global::Wisej.Web.ComboBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDown += x, x => _data.DropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.DropDownClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownClosed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownClosed += x, x => _data.DropDownClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.DropDownStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDownStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDownStyleChanged += x, x => _data.DropDownStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.SelectionChangeCommitted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChangeCommitted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChangeCommitted += x, x => _data.SelectionChangeCommitted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.SortedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SortedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SortedChanged += x, x => _data.SortedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ComboBox.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.CommonDialog"/> class as observables.
    /// </summary>
    public class RxCommonDialogEvents
    {
        private readonly global::Wisej.Web.CommonDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.CommonDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCommonDialogEvents(global::Wisej.Web.CommonDialog data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CommonDialog.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ContainerControl"/> class as observables.
    /// </summary>
    public class RxContainerControlEvents : global::Wisej.Web.RxScrollableControlEvents
    {
        private readonly global::Wisej.Web.ContainerControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ContainerControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContainerControlEvents(global::Wisej.Web.ContainerControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContainerControl.Accelerator"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.AcceleratorEventArgs> Accelerator => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.AcceleratorEventHandler, global::Wisej.Web.AcceleratorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.AcceleratorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Accelerator += x, x => _data.Accelerator -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContainerControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContainerControl.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ContextMenu"/> class as observables.
    /// </summary>
    public class RxContextMenuEvents : global::Wisej.Web.RxMenuEvents
    {
        private readonly global::Wisej.Web.ContextMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ContextMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxContextMenuEvents(global::Wisej.Web.ContextMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContextMenu.Collapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Collapse => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Collapse += x, x => _data.Collapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContextMenu.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ContextMenu.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Popup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Popup += x, x => _data.Popup -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Control"/> class as observables.
    /// </summary>
    public class RxControlEvents : global::Wisej.Base.RxControlBaseEvents
    {
        private readonly global::Wisej.Web.Control _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Control"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxControlEvents(global::Wisej.Web.Control data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Appear"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appear => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Appear += x, x => _data.Appear -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.BecomingActiveControlChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BecomingActiveControlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BecomingActiveControlChanged += x, x => _data.BecomingActiveControlChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.BindingContextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BindingContextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BindingContextChanged += x, x => _data.BindingContextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ClientSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ClientSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ClientSizeChanged += x, x => _data.ClientSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ControlCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ControlCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlCreated += x, x => _data.ControlCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Disappear"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappear => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disappear += x, x => _data.Disappear -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnd += x, x => _data.DragEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.DragStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStart += x, x => _data.DragStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.EndMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EndMove += x, x => _data.EndMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.EndResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EndResize => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EndResize += x, x => _data.EndResize -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.GotFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GotFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GotFocus += x, x => _data.GotFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.HandleCreated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleCreated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HandleCreated += x, x => _data.HandleCreated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.HandleDestroyed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HandleDestroyed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HandleDestroyed += x, x => _data.HandleDestroyed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.HelpRequested"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.HelpEventArgs> HelpRequested => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.HelpEventHandler, global::Wisej.Web.HelpEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.HelpEventArgs hlpevent) => eventHandler(hlpevent);
            return Handler;
        }, x => _data.HelpRequested += x, x => _data.HelpRequested -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Layout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.LayoutEventArgs> Layout => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.LayoutEventHandler, global::Wisej.Web.LayoutEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.LayoutEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Layout += x, x => _data.Layout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.LongTap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LongTap => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LongTap += x, x => _data.LongTap -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.LostFocus"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LostFocus => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LostFocus += x, x => _data.LostFocus -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseEnter += x, x => _data.MouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ParentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ParentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ParentChanged += x, x => _data.ParentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Pinch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PinchEventArgs> Pinch => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PinchEventHandler, global::Wisej.Web.PinchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PinchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Pinch += x, x => _data.Pinch -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PreviewKeyDownEventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PreviewKeyDownEventHandler, global::Wisej.Web.PreviewKeyDownEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PreviewKeyDownEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.QueryContinueDragEventHandler, global::Wisej.Web.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Resize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Resize => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Resize += x, x => _data.Resize -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.ResponsiveProfileChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ResponsiveProfileChangedEventArgs> ResponsiveProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ResponsiveProfileChangedEventHandler, global::Wisej.Web.ResponsiveProfileChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ResponsiveProfileChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ResponsiveProfileChanged += x, x => _data.ResponsiveProfileChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Rotate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.RotateEventArgs> Rotate => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.RotateEventHandler, global::Wisej.Web.RotateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.RotateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Rotate += x, x => _data.Rotate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.SizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeChanged += x, x => _data.SizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.StartMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StartMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StartMove += x, x => _data.StartMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.StartResize"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StartResize => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StartResize += x, x => _data.StartResize -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Swipe"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SwipeEventArgs> Swipe => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SwipeEventHandler, global::Wisej.Web.SwipeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SwipeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Swipe += x, x => _data.Swipe -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Tap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tap => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tap += x, x => _data.Tap -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TouchCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TouchEventArgs> TouchCancel => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TouchEventHandler, global::Wisej.Web.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchCancel += x, x => _data.TouchCancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TouchEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TouchEventArgs> TouchEnd => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TouchEventHandler, global::Wisej.Web.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnd += x, x => _data.TouchEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TouchEventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TouchEventHandler, global::Wisej.Web.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.TouchStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TouchEventArgs> TouchStart => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TouchEventHandler, global::Wisej.Web.TouchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TouchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchStart += x, x => _data.TouchStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Track"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TrackEventArgs> Track => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TrackEventHandler, global::Wisej.Web.TrackEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TrackEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Track += x, x => _data.Track -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Control.WidgetEvent"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.WidgetEventArgs> WidgetEvent => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.WidgetEventHandler, global::Wisej.Web.WidgetEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.WidgetEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WidgetEvent += x, x => _data.WidgetEvent -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.CurrencyManager"/> class as observables.
    /// </summary>
    public class RxCurrencyManagerEvents : global::Wisej.Web.RxBindingManagerBaseEvents
    {
        private readonly global::Wisej.Web.CurrencyManager _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.CurrencyManager"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxCurrencyManagerEvents(global::Wisej.Web.CurrencyManager data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CurrencyManager.ItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemChangedEventArgs> ItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemChangedEventHandler, global::Wisej.Web.ItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemChanged += x, x => _data.ItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.CurrencyManager.MetaDataChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MetaDataChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MetaDataChanged += x, x => _data.MetaDataChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DataGridView"/> class as observables.
    /// </summary>
    public class RxDataGridViewEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.DataGridView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DataGridView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewEvents(global::Wisej.Web.DataGridView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AllowUserToAddRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToAddRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToAddRowsChanged += x, x => _data.AllowUserToAddRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AllowUserToDeleteRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToDeleteRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToDeleteRowsChanged += x, x => _data.AllowUserToDeleteRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AllowUserToOrderColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToOrderColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToOrderColumnsChanged += x, x => _data.AllowUserToOrderColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AllowUserToResizeColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToResizeColumnsChanged += x, x => _data.AllowUserToResizeColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AllowUserToResizeRowsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToResizeRowsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToResizeRowsChanged += x, x => _data.AllowUserToResizeRowsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.AutoGenerateColumnsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoGenerateColumnsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoGenerateColumnsChanged += x, x => _data.AutoGenerateColumnsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellBeginEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellCancelEventArgs> CellBeginEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellCancelEventHandler, global::Wisej.Web.DataGridViewCellCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellBeginEdit += x, x => _data.CellBeginEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellClick += x, x => _data.CellClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellContextMenuNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellContextMenuNeededEventArgs> CellContextMenuNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellContextMenuNeededEventHandler, global::Wisej.Web.DataGridViewCellContextMenuNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellContextMenuNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellContextMenuNeeded += x, x => _data.CellContextMenuNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellDoubleClick += x, x => _data.CellDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellEndEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellEndEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEndEdit += x, x => _data.CellEndEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellEnter += x, x => _data.CellEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellErrorTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellErrorTextChanged += x, x => _data.CellErrorTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellErrorTextNeededEventArgs> CellErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellErrorTextNeededEventHandler, global::Wisej.Web.DataGridViewCellErrorTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellErrorTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellErrorTextNeeded += x, x => _data.CellErrorTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellFormatting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellFormattingEventArgs> CellFormatting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellFormattingEventHandler, global::Wisej.Web.DataGridViewCellFormattingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellFormattingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellFormatting += x, x => _data.CellFormatting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellLeave += x, x => _data.CellLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> CellMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseClick += x, x => _data.CellMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> CellMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseDoubleClick += x, x => _data.CellMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> CellMouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseDown += x, x => _data.CellMouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellMouseEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseEnter += x, x => _data.CellMouseEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellMouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseLeave += x, x => _data.CellMouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> CellMouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseMove += x, x => _data.CellMouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellMouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> CellMouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellMouseUp += x, x => _data.CellMouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellPaint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellPaintEventArgs> CellPaint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellPaintEventHandler, global::Wisej.Web.DataGridViewCellPaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellPaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellPaint += x, x => _data.CellPaint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellParsing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellParsingEventArgs> CellParsing => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellParsingEventHandler, global::Wisej.Web.DataGridViewCellParsingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellParsingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellParsing += x, x => _data.CellParsing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellStateChangedEventArgs> CellStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellStateChangedEventHandler, global::Wisej.Web.DataGridViewCellStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStateChanged += x, x => _data.CellStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStyleChanged += x, x => _data.CellStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellStyleContentChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellStyleContentChangedEventArgs> CellStyleContentChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellStyleContentChangedEventHandler, global::Wisej.Web.DataGridViewCellStyleContentChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellStyleContentChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellStyleContentChanged += x, x => _data.CellStyleContentChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewToolClickEventArgs> CellToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewToolClickEventHandler, global::Wisej.Web.DataGridViewToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellToolClick += x, x => _data.CellToolClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellToolTipTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellToolTipTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellToolTipTextChanged += x, x => _data.CellToolTipTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellToolTipTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellToolTipTextNeededEventArgs> CellToolTipTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellToolTipTextNeededEventHandler, global::Wisej.Web.DataGridViewCellToolTipTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellToolTipTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellToolTipTextNeeded += x, x => _data.CellToolTipTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellValidated => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValidated += x, x => _data.CellValidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellValidatingEventArgs> CellValidating => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellValidatingEventHandler, global::Wisej.Web.DataGridViewCellValidatingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellValidatingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValidating += x, x => _data.CellValidating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> CellValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValueChanged += x, x => _data.CellValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellValueNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellValueEventArgs> CellValueNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellValueEventHandler, global::Wisej.Web.DataGridViewCellValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValueNeeded += x, x => _data.CellValueNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CellValuePushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellValueEventArgs> CellValuePushed => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellValueEventHandler, global::Wisej.Web.DataGridViewCellValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CellValuePushed += x, x => _data.CellValuePushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnAdded += x, x => _data.ColumnAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnDisplayIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnDisplayIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDisplayIndexChanged += x, x => _data.ColumnDisplayIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnFillWeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnFillWeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnFillWeightChanged += x, x => _data.ColumnFillWeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> ColumnHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderMouseClick += x, x => _data.ColumnHeaderMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> ColumnHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeaderMouseDoubleClick += x, x => _data.ColumnHeaderMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnHeadersHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ColumnHeadersHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnHeadersHeightChanged += x, x => _data.ColumnHeadersHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnMaximumWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnMaximumWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnMaximumWidthChanged += x, x => _data.ColumnMaximumWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnMinimumWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnMinimumWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnMinimumWidthChanged += x, x => _data.ColumnMinimumWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnNameChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnNameChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnNameChanged += x, x => _data.ColumnNameChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnRemoved += x, x => _data.ColumnRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnSortModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnSortModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnSortModeChanged += x, x => _data.ColumnSortModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnStateChangedEventArgs> ColumnStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnStateChangedEventHandler, global::Wisej.Web.DataGridViewColumnStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnStateChanged += x, x => _data.ColumnStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewColumnEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewColumnEventHandler, global::Wisej.Web.DataGridViewColumnEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewColumnEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.CurrentCellChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentCellChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentCellChanged += x, x => _data.CurrentCellChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DataBindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewBindingCompleteEventArgs> DataBindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewBindingCompleteEventHandler, global::Wisej.Web.DataGridViewBindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewBindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataBindingComplete += x, x => _data.DataBindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewDataErrorEventHandler, global::Wisej.Web.DataGridViewDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewDataUpdatedEventHandler, global::Wisej.Web.DataGridViewDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DefaultRowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DefaultRowHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultRowHeightChanged += x, x => _data.DefaultRowHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.DefaultValuesNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> DefaultValuesNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DefaultValuesNeeded += x, x => _data.DefaultValuesNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.EditingControlShowing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewEditingControlShowingEventArgs> EditingControlShowing => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewEditingControlShowingEventHandler, global::Wisej.Web.DataGridViewEditingControlShowingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewEditingControlShowingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditingControlShowing += x, x => _data.EditingControlShowing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.EditModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditModeChanged += x, x => _data.EditModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.KeepSameRowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> KeepSameRowHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeepSameRowHeightChanged += x, x => _data.KeepSameRowHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.LastCellTab"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> LastCellTab => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LastCellTab += x, x => _data.LastCellTab -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.LiveResizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LiveResizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LiveResizeChanged += x, x => _data.LiveResizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.MultiSelectChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultiSelectChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultiSelectChanged += x, x => _data.MultiSelectChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.NewRowNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> NewRowNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NewRowNeeded += x, x => _data.NewRowNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowCollapsed += x, x => _data.RowCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> RowEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowEnter += x, x => _data.RowEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowErrorTextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowErrorTextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowErrorTextChanged += x, x => _data.RowErrorTextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowErrorTextNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowErrorTextNeededEventArgs> RowErrorTextNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowErrorTextNeededEventHandler, global::Wisej.Web.DataGridViewRowErrorTextNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowErrorTextNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowErrorTextNeeded += x, x => _data.RowErrorTextNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowExpanded += x, x => _data.RowExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowHeaderMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> RowHeaderMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeaderMouseClick += x, x => _data.RowHeaderMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowHeaderMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellMouseEventArgs> RowHeaderMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellMouseEventHandler, global::Wisej.Web.DataGridViewCellMouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellMouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeaderMouseDoubleClick += x, x => _data.RowHeaderMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowHeadersWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RowHeadersWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeadersWidthChanged += x, x => _data.RowHeadersWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeightChanged += x, x => _data.RowHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowHeightInfoNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowHeightInfoNeededEventArgs> RowHeightInfoNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowHeightInfoNeededEventHandler, global::Wisej.Web.DataGridViewRowHeightInfoNeededEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowHeightInfoNeededEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowHeightInfoNeeded += x, x => _data.RowHeightInfoNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> RowLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowLeave += x, x => _data.RowLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowMaximumHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowMaximumHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowMaximumHeightChanged += x, x => _data.RowMaximumHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowMinimumHeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> RowMinimumHeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowMinimumHeightChanged += x, x => _data.RowMinimumHeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowsAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowsAddedEventArgs> RowsAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowsAddedEventHandler, global::Wisej.Web.DataGridViewRowsAddedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowsAddedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowsAdded += x, x => _data.RowsAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowsRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowsRemovedEventArgs> RowsRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowsRemovedEventHandler, global::Wisej.Web.DataGridViewRowsRemovedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowsRemovedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowsRemoved += x, x => _data.RowsRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowStateChangedEventArgs> RowStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowStateChangedEventHandler, global::Wisej.Web.DataGridViewRowStateChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowStateChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowStateChanged += x, x => _data.RowStateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowValidated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellEventArgs> RowValidated => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellEventHandler, global::Wisej.Web.DataGridViewCellEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowValidated += x, x => _data.RowValidated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.RowValidating"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellCancelEventArgs> RowValidating => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellCancelEventHandler, global::Wisej.Web.DataGridViewCellCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RowValidating += x, x => _data.RowValidating -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.SelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectionChanged += x, x => _data.SelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ShowColumnVisibilityMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ShowColumnVisibilityMenuChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ShowColumnVisibilityMenuChanged += x, x => _data.ShowColumnVisibilityMenuChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.SortCompare"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewSortCompareEventArgs> SortCompare => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewSortCompareEventHandler, global::Wisej.Web.DataGridViewSortCompareEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewSortCompareEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SortCompare += x, x => _data.SortCompare -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.Sorted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Sorted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Sorted += x, x => _data.Sorted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.StandardTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StandardTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StandardTabChanged += x, x => _data.StandardTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.TopLeftHeaderClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewCellCancelEventArgs> TopLeftHeaderClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewCellCancelEventHandler, global::Wisej.Web.DataGridViewCellCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewCellCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TopLeftHeaderClick += x, x => _data.TopLeftHeaderClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.UserAddedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> UserAddedRow => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserAddedRow += x, x => _data.UserAddedRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.UserDeletedRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowEventArgs> UserDeletedRow => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowEventHandler, global::Wisej.Web.DataGridViewRowEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletedRow += x, x => _data.UserDeletedRow -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridView.UserDeletingRow"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataGridViewRowCancelEventArgs> UserDeletingRow => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataGridViewRowCancelEventHandler, global::Wisej.Web.DataGridViewRowCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataGridViewRowCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletingRow += x, x => _data.UserDeletingRow -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DataGridViewColumn"/> class as observables.
    /// </summary>
    public class RxDataGridViewColumnEvents
    {
        private readonly global::Wisej.Web.DataGridViewColumn _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DataGridViewColumn"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewColumnEvents(global::Wisej.Web.DataGridViewColumn data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridViewColumn.Disposed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disposed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disposed += x, x => _data.Disposed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DataGridViewComboBoxCell"/> class as observables.
    /// </summary>
    public class RxDataGridViewComboBoxCellEvents
    {
        private readonly global::Wisej.Web.DataGridViewComboBoxCell _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DataGridViewComboBoxCell"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataGridViewComboBoxCellEvents(global::Wisej.Web.DataGridViewComboBoxCell data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataGridViewComboBoxCell.ItemsCollectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ItemsCollectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemsCollectionChanged += x, x => _data.ItemsCollectionChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DataRepeater"/> class as observables.
    /// </summary>
    public class RxDataRepeaterEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.DataRepeater _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DataRepeater"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataRepeaterEvents(global::Wisej.Web.DataRepeater data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.AllowUserToAddItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToAddItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToAddItemsChanged += x, x => _data.AllowUserToAddItemsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.AllowUserToDeleteItemsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AllowUserToDeleteItemsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AllowUserToDeleteItemsChanged += x, x => _data.AllowUserToDeleteItemsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.CurrentItemIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentItemIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentItemIndexChanged += x, x => _data.CurrentItemIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.DataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterDataErrorEventArgs> DataError => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterDataErrorEventHandler, global::Wisej.Web.DataRepeaterDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataError += x, x => _data.DataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemCloned"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemEventArgs> ItemCloned => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemEventHandler, global::Wisej.Web.DataRepeaterItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCloned += x, x => _data.ItemCloned -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemCloning"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemCloneEventArgs> ItemCloning => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemCloneEventHandler, global::Wisej.Web.DataRepeaterItemCloneEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemCloneEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCloning += x, x => _data.ItemCloning -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemsAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs> ItemsAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterAddRemoveItemsEventHandler, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemsAdded += x, x => _data.ItemsAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemEventArgs> ItemSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemEventHandler, global::Wisej.Web.DataRepeaterItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemSelected += x, x => _data.ItemSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemsRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs> ItemsRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterAddRemoveItemsEventHandler, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemsRemoved += x, x => _data.ItemsRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemUpdate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemEventArgs> ItemUpdate => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemEventHandler, global::Wisej.Web.DataRepeaterItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemUpdate += x, x => _data.ItemUpdate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemValueNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemValueEventArgs> ItemValueNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemValueEventHandler, global::Wisej.Web.DataRepeaterItemValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemValueNeeded += x, x => _data.ItemValueNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.ItemValuePushed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterItemValueEventArgs> ItemValuePushed => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterItemValueEventHandler, global::Wisej.Web.DataRepeaterItemValueEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterItemValueEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemValuePushed += x, x => _data.ItemValuePushed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.LayoutStyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LayoutStyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LayoutStyleChanged += x, x => _data.LayoutStyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.NewItemNeeded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NewItemNeeded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NewItemNeeded += x, x => _data.NewItemNeeded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.UserAddedItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs> UserAddedItems => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterAddRemoveItemsEventHandler, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserAddedItems += x, x => _data.UserAddedItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.UserDeletedItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs> UserDeletedItems => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterAddRemoveItemsEventHandler, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterAddRemoveItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletedItems += x, x => _data.UserDeletedItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.UserDeletingItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DataRepeaterAddRemoveItemsCancelEventArgs> UserDeletingItems => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DataRepeaterAddRemoveItemsCancelEventHandler, global::Wisej.Web.DataRepeaterAddRemoveItemsCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DataRepeaterAddRemoveItemsCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UserDeletingItems += x, x => _data.UserDeletingItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeater.VirtualModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VirtualModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VirtualModeChanged += x, x => _data.VirtualModeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DataRepeaterItem"/> class as observables.
    /// </summary>
    public class RxDataRepeaterItemEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.DataRepeaterItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DataRepeaterItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDataRepeaterItemEvents(global::Wisej.Web.DataRepeaterItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeaterItem.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeaterItem.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeaterItem.PanelCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelCollapsed += x, x => _data.PanelCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeaterItem.PanelExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelExpanded += x, x => _data.PanelExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DataRepeaterItem.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DateTimePicker"/> class as observables.
    /// </summary>
    public class RxDateTimePickerEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.DateTimePicker _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DateTimePicker"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDateTimePickerEvents(global::Wisej.Web.DateTimePicker data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.CloseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CloseUp => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CloseUp += x, x => _data.CloseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.DropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DropDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DropDown += x, x => _data.DropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.EditableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditableChanged += x, x => _data.EditableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.FormatChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatChanged += x, x => _data.FormatChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.MaskChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaskChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaskChanged += x, x => _data.MaskChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DateTimePicker.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Desktop"/> class as observables.
    /// </summary>
    public class RxDesktopEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.Desktop _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Desktop"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDesktopEvents(global::Wisej.Web.Desktop data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.Deactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivate += x, x => _data.Deactivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DesktopTaskBarItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DesktopTaskBarItemClickEventHandler, global::Wisej.Web.DesktopTaskBarItemClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DesktopTaskBarItemClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemClick += x, x => _data.ItemClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.ItemDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DesktopTaskBarItemClickEventArgs> ItemDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DesktopTaskBarItemClickEventHandler, global::Wisej.Web.DesktopTaskBarItemClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DesktopTaskBarItemClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDoubleClick += x, x => _data.ItemDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.TaskbarPositionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TaskbarPositionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TaskbarPositionChanged += x, x => _data.TaskbarPositionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.TaskbarVisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TaskbarVisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TaskbarVisibleChanged += x, x => _data.TaskbarVisibleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Desktop.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.DomainUpDown"/> class as observables.
    /// </summary>
    public class RxDomainUpDownEvents : global::Wisej.Web.RxUpDownBaseEvents
    {
        private readonly global::Wisej.Web.DomainUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.DomainUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxDomainUpDownEvents(global::Wisej.Web.DomainUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DomainUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DomainUpDown.SelectedItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedItemChanged += x, x => _data.SelectedItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.DomainUpDown.SortedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SortedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SortedChanged += x, x => _data.SortedChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ErrorProvider"/> class as observables.
    /// </summary>
    public class RxErrorProviderEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.ErrorProvider _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ErrorProvider"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxErrorProviderEvents(global::Wisej.Web.ErrorProvider data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ErrorProvider.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.FileDialog"/> class as observables.
    /// </summary>
    public class RxFileDialogEvents : global::Wisej.Web.RxCommonDialogEvents
    {
        private readonly global::Wisej.Web.FileDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.FileDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFileDialogEvents(global::Wisej.Web.FileDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FileDialog.LoadPath"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.FileDialogLoadPathEventArgs> LoadPath => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.FileDialogLoadPathEventHandler, global::Wisej.Web.FileDialogLoadPathEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.FileDialogLoadPathEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadPath += x, x => _data.LoadPath -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.FlashPlayer"/> class as observables.
    /// </summary>
    public class RxFlashPlayerEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.FlashPlayer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.FlashPlayer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFlashPlayerEvents(global::Wisej.Web.FlashPlayer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.Loaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Loaded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Loaded += x, x => _data.Loaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.SwfSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SwfSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SwfSourceChanged += x, x => _data.SwfSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.Timeout"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Timeout => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Timeout += x, x => _data.Timeout -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlashPlayer.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.FlowLayoutPanel"/> class as observables.
    /// </summary>
    public class RxFlowLayoutPanelEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.FlowLayoutPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.FlowLayoutPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFlowLayoutPanelEvents(global::Wisej.Web.FlowLayoutPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FlowLayoutPanel.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.FolderBrowserDialog"/> class as observables.
    /// </summary>
    public class RxFolderBrowserDialogEvents : global::Wisej.Web.RxCommonDialogEvents
    {
        private readonly global::Wisej.Web.FolderBrowserDialog _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.FolderBrowserDialog"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFolderBrowserDialogEvents(global::Wisej.Web.FolderBrowserDialog data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.FolderBrowserDialog.LoadPath"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.FileDialogLoadPathEventArgs> LoadPath => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.FileDialogLoadPathEventHandler, global::Wisej.Web.FileDialogLoadPathEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.FileDialogLoadPathEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadPath += x, x => _data.LoadPath -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Form"/> class as observables.
    /// </summary>
    public class RxFormEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.Form _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Form"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxFormEvents(global::Wisej.Web.Form data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.Deactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivate += x, x => _data.Deactivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.FormClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.FormClosedEventArgs> FormClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.FormClosedEventHandler, global::Wisej.Web.FormClosedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.FormClosedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormClosed += x, x => _data.FormClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.FormClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.FormClosingEventArgs> FormClosing => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.FormClosingEventHandler, global::Wisej.Web.FormClosingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.FormClosingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormClosing += x, x => _data.FormClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.HelpButtonClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HelpButtonClicked => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HelpButtonClicked += x, x => _data.HelpButtonClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MaximumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaximumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaximumSizeChanged += x, x => _data.MaximumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MdiChildActivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MdiChildActivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MdiChildActivate += x, x => _data.MdiChildActivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MdiChildAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> MdiChildAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MdiChildAdded += x, x => _data.MdiChildAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MdiChildRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> MdiChildRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MdiChildRemoved += x, x => _data.MdiChildRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.MinimumSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MinimumSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MinimumSizeChanged += x, x => _data.MinimumSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.Shown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Shown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Shown += x, x => _data.Shown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Form.WindowStateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> WindowStateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WindowStateChanged += x, x => _data.WindowStateChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.GroupBox"/> class as observables.
    /// </summary>
    public class RxGroupBoxEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.GroupBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.GroupBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxGroupBoxEvents(global::Wisej.Web.GroupBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.GroupBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.GroupBox.GroupBoxCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GroupBoxCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GroupBoxCollapsed += x, x => _data.GroupBoxCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.GroupBox.GroupBoxExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> GroupBoxExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.GroupBoxExpanded += x, x => _data.GroupBoxExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.GroupBox.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.HtmlPanel"/> class as observables.
    /// </summary>
    public class RxHtmlPanelEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.HtmlPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.HtmlPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxHtmlPanelEvents(global::Wisej.Web.HtmlPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.ElementClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.HtmlPanelElementClickArgs> ElementClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.HtmlPanelElementClickHandler, global::Wisej.Web.HtmlPanelElementClickArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.HtmlPanelElementClickArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ElementClick += x, x => _data.ElementClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.HtmlChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HtmlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HtmlChanged += x, x => _data.HtmlChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.HtmlSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HtmlSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HtmlSourceChanged += x, x => _data.HtmlSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.HtmlPanel.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.IFramePanel"/> class as observables.
    /// </summary>
    public class RxIFramePanelEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.IFramePanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.IFramePanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxIFramePanelEvents(global::Wisej.Web.IFramePanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.IFramePanel.DocumentCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DocumentCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DocumentCompleted += x, x => _data.DocumentCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.IFramePanel.UrlChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> UrlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.UrlChanged += x, x => _data.UrlChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Label"/> class as observables.
    /// </summary>
    public class RxLabelEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Label _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Label"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLabelEvents(global::Wisej.Web.Label data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Label.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Line"/> class as observables.
    /// </summary>
    public class RxLineEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Line _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Line"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLineEvents(global::Wisej.Web.Line data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Line.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.LinkLabel"/> class as observables.
    /// </summary>
    public class RxLinkLabelEvents : global::Wisej.Web.RxLabelEvents
    {
        private readonly global::Wisej.Web.LinkLabel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.LinkLabel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLinkLabelEvents(global::Wisej.Web.LinkLabel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.LinkLabel.LinkClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.LinkLabelLinkClickedEventArgs> LinkClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.LinkLabelLinkClickedEventHandler, global::Wisej.Web.LinkLabelLinkClickedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.LinkLabelLinkClickedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LinkClicked += x, x => _data.LinkClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.LinkLabel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.LinkMenuItem"/> class as observables.
    /// </summary>
    public class RxLinkMenuItemEvents : global::Wisej.Web.RxMenuItemEvents
    {
        private readonly global::Wisej.Web.LinkMenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.LinkMenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxLinkMenuItemEvents(global::Wisej.Web.LinkMenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.LinkMenuItem.HRefChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> HRefChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.HRefChanged += x, x => _data.HRefChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ListBox"/> class as observables.
    /// </summary>
    public class RxListBoxEvents : global::Wisej.Web.RxListControlEvents
    {
        private readonly global::Wisej.Web.ListBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ListBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListBoxEvents(global::Wisej.Web.ListBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.SortedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SortedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SortedChanged += x, x => _data.SortedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListBox.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ListControl"/> class as observables.
    /// </summary>
    public class RxListControlEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ListControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ListControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListControlEvents(global::Wisej.Web.ListControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.DisplayMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DisplayMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayMemberChanged += x, x => _data.DisplayMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.Format"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ListControlConvertEventArgs> Format => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ListControlConvertEventHandler, global::Wisej.Web.ListControlConvertEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ListControlConvertEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Format += x, x => _data.Format -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.FormatInfoChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatInfoChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatInfoChanged += x, x => _data.FormatInfoChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.FormatStringChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormatStringChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormatStringChanged += x, x => _data.FormatStringChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.FormattingEnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FormattingEnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FormattingEnabledChanged += x, x => _data.FormattingEnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.IconMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> IconMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.IconMemberChanged += x, x => _data.IconMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.SelectedValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedValueChanged += x, x => _data.SelectedValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.ToolTipMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ToolTipMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolTipMemberChanged += x, x => _data.ToolTipMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListControl.ValueMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueMemberChanged += x, x => _data.ValueMemberChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ListView"/> class as observables.
    /// </summary>
    public class RxListViewEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ListView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ListView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxListViewEvents(global::Wisej.Web.ListView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.LabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.LabelEditEventHandler, global::Wisej.Web.LabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.LabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.LabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.LabelEditEventHandler, global::Wisej.Web.LabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.LabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.CacheVirtualItems"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.CacheVirtualItemsEventArgs> CacheVirtualItems => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.CacheVirtualItemsEventHandler, global::Wisej.Web.CacheVirtualItemsEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.CacheVirtualItemsEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CacheVirtualItems += x, x => _data.CacheVirtualItems -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ColumnClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ColumnClickEventArgs> ColumnClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ColumnClickEventHandler, global::Wisej.Web.ColumnClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ColumnClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnClick += x, x => _data.ColumnClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ColumnDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ColumnClickEventArgs> ColumnDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ColumnClickEventHandler, global::Wisej.Web.ColumnClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ColumnClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnDoubleClick += x, x => _data.ColumnDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ColumnReordered"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ColumnReorderedEventArgs> ColumnReordered => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ColumnReorderedEventHandler, global::Wisej.Web.ColumnReorderedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ColumnReorderedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnReordered += x, x => _data.ColumnReordered -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ColumnWidthChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ColumnWidthChangedEventArgs> ColumnWidthChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ColumnWidthChangedEventHandler, global::Wisej.Web.ColumnWidthChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ColumnWidthChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ColumnWidthChanged += x, x => _data.ColumnWidthChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.DataBindingComplete"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ListViewBindingCompleteEventArgs> DataBindingComplete => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ListViewBindingCompleteEventEventHandler, global::Wisej.Web.ListViewBindingCompleteEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ListViewBindingCompleteEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataBindingComplete += x, x => _data.DataBindingComplete -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.DataMemberChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataMemberChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataMemberChanged += x, x => _data.DataMemberChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.DataSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DataSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataSourceChanged += x, x => _data.DataSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.DataUpdated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ListViewDataUpdatedEventArgs> DataUpdated => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ListViewDataUpdatedEventHandler, global::Wisej.Web.ListViewDataUpdatedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ListViewDataUpdatedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DataUpdated += x, x => _data.DataUpdated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemCheckEventArgs> ItemCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemCheckEventHandler, global::Wisej.Web.ItemCheckEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemCheckEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemCheck += x, x => _data.ItemCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemChecked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemCheckedEventArgs> ItemChecked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemCheckedEventHandler, global::Wisej.Web.ItemCheckedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemCheckedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemChecked += x, x => _data.ItemChecked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemClickEventArgs> ItemClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemClickEventHandler, global::Wisej.Web.ItemClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemClick += x, x => _data.ItemClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemClickEventArgs> ItemDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemClickEventHandler, global::Wisej.Web.ItemClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDoubleClick += x, x => _data.ItemDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ListViewItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ListViewItemDragEventHandler, global::Wisej.Web.ListViewItemDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ListViewItemDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDrag += x, x => _data.ItemDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemMouseHoverEventArgs> ItemMouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemMouseHoverEventHandler, global::Wisej.Web.ItemMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemMouseHover += x, x => _data.ItemMouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemMouseHoverEventArgs> ItemMouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemMouseHoverEventHandler, global::Wisej.Web.ItemMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemMouseLeave += x, x => _data.ItemMouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ItemSelectionChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ItemSelectionChangedEventArgs> ItemSelectionChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemSelectionChangedEventHandler, global::Wisej.Web.ItemSelectionChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemSelectionChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemSelectionChanged += x, x => _data.ItemSelectionChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.RetrieveVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.RetrieveVirtualItemEventArgs> RetrieveVirtualItem => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.RetrieveVirtualItemEventHandler, global::Wisej.Web.RetrieveVirtualItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.RetrieveVirtualItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RetrieveVirtualItem += x, x => _data.RetrieveVirtualItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.SearchForVirtualItem"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SearchForVirtualItemEventArgs> SearchForVirtualItem => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SearchForVirtualItemEventHandler, global::Wisej.Web.SearchForVirtualItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SearchForVirtualItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SearchForVirtualItem += x, x => _data.SearchForVirtualItem -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ListView.VirtualItemsSelectionRangeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ListViewVirtualItemsSelectionRangeChangedEventArgs> VirtualItemsSelectionRangeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ListViewVirtualItemsSelectionRangeChangedEventHandler, global::Wisej.Web.ListViewVirtualItemsSelectionRangeChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ListViewVirtualItemsSelectionRangeChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VirtualItemsSelectionRangeChanged += x, x => _data.VirtualItemsSelectionRangeChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.MainMenu"/> class as observables.
    /// </summary>
    public class RxMainMenuEvents : global::Wisej.Web.RxMenuEvents
    {
        private readonly global::Wisej.Web.MainMenu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.MainMenu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMainMenuEvents(global::Wisej.Web.MainMenu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MainMenu.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MainMenu.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MainMenu.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MainMenu.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MainMenu.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.MaskedTextBox"/> class as observables.
    /// </summary>
    public class RxMaskedTextBoxEvents : global::Wisej.Web.RxTextBoxBaseEvents
    {
        private readonly global::Wisej.Web.MaskedTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.MaskedTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMaskedTextBoxEvents(global::Wisej.Web.MaskedTextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MaskedTextBox.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MaskedTextBox.MaskChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MaskChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MaskChanged += x, x => _data.MaskChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MaskedTextBox.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MaskedTextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MaskedTextBox.TypeValidationCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TypeValidationEventArgs> TypeValidationCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TypeValidationEventHandler, global::Wisej.Web.TypeValidationEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TypeValidationEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TypeValidationCompleted += x, x => _data.TypeValidationCompleted -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Media"/> class as observables.
    /// </summary>
    public class RxMediaEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Media _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Media"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMediaEvents(global::Wisej.Web.Media data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.CurrentTimeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CurrentTimeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CurrentTimeChanged += x, x => _data.CurrentTimeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Ended"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Ended => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Ended += x, x => _data.Ended -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Error => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Error += x, x => _data.Error -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Paused"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Paused => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paused += x, x => _data.Paused -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Playing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Playing => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Playing += x, x => _data.Playing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.VolumeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VolumeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VolumeChanged += x, x => _data.VolumeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Media.Waiting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Waiting => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Waiting += x, x => _data.Waiting -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Menu"/> class as observables.
    /// </summary>
    public class RxMenuEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.Menu _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Menu"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuEvents(global::Wisej.Web.Menu data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Menu.MenuItemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemAdded += x, x => _data.MenuItemAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Menu.MenuItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemClicked += x, x => _data.MenuItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Menu.MenuItemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemRemoved += x, x => _data.MenuItemRemoved -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.MenuBar"/> class as observables.
    /// </summary>
    public class RxMenuBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.MenuBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.MenuBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuBarEvents(global::Wisej.Web.MenuBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.MenuItemAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemAdded += x, x => _data.MenuItemAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.MenuItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemClicked += x, x => _data.MenuItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.MenuItemRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemRemoved += x, x => _data.MenuItemRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.MenuItem"/> class as observables.
    /// </summary>
    public class RxMenuItemEvents : global::Wisej.Web.RxMenuEvents
    {
        private readonly global::Wisej.Web.MenuItem _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.MenuItem"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMenuItemEvents(global::Wisej.Web.MenuItem data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.MenuItemClicked"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MenuItemEventArgs> MenuItemClicked => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MenuItemEventHandler, global::Wisej.Web.MenuItemEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MenuItemEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MenuItemClicked += x, x => _data.MenuItemClicked -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.Popup"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Popup => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Popup += x, x => _data.Popup -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.Select"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Select => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Select += x, x => _data.Select -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MenuItem.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.MonthCalendar"/> class as observables.
    /// </summary>
    public class RxMonthCalendarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.MonthCalendar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.MonthCalendar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxMonthCalendarEvents(global::Wisej.Web.MonthCalendar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.DateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DateRangeEventArgs> DateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DateRangeEventHandler, global::Wisej.Web.DateRangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DateRangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateChanged += x, x => _data.DateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.DateSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DateRangeEventArgs> DateSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DateRangeEventHandler, global::Wisej.Web.DateRangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DateRangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DateSelected += x, x => _data.DateSelected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.DisplayRangeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DateRangeEventArgs> DisplayRangeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DateRangeEventHandler, global::Wisej.Web.DateRangeEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DateRangeEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DisplayRangeChanged += x, x => _data.DisplayRangeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.MonthCalendar.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.NumericUpDown"/> class as observables.
    /// </summary>
    public class RxNumericUpDownEvents : global::Wisej.Web.RxUpDownBaseEvents
    {
        private readonly global::Wisej.Web.NumericUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.NumericUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxNumericUpDownEvents(global::Wisej.Web.NumericUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.NumericUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.NumericUpDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.NumericUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Page"/> class as observables.
    /// </summary>
    public class RxPageEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.Page _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Page"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPageEvents(global::Wisej.Web.Page data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.Activated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Activated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Activated += x, x => _data.Activated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.Deactivate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Deactivate => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deactivate += x, x => _data.Deactivate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.MarginChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MarginChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MarginChanged += x, x => _data.MarginChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Page.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Panel"/> class as observables.
    /// </summary>
    public class RxPanelEvents : global::Wisej.Web.RxScrollableControlEvents
    {
        private readonly global::Wisej.Web.Panel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Panel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPanelEvents(global::Wisej.Web.Panel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Panel.PanelCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelCollapsed += x, x => _data.PanelCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Panel.PanelExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelExpanded += x, x => _data.PanelExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Panel.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Panel.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.PdfViewer"/> class as observables.
    /// </summary>
    public class RxPdfViewerEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.PdfViewer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.PdfViewer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPdfViewerEvents(global::Wisej.Web.PdfViewer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.PdfSourceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PdfSourceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PdfSourceChanged += x, x => _data.PdfSourceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PdfViewer.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.PictureBox"/> class as observables.
    /// </summary>
    public class RxPictureBoxEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.PictureBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.PictureBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPictureBoxEvents(global::Wisej.Web.PictureBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.LoadCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LoadCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LoadCompleted += x, x => _data.LoadCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.SizeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SizeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SizeModeChanged += x, x => _data.SizeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PictureBox.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ProgressBar"/> class as observables.
    /// </summary>
    public class RxProgressBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ProgressBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ProgressBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxProgressBarEvents(global::Wisej.Web.ProgressBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ProgressBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.PropertyGrid"/> class as observables.
    /// </summary>
    public class RxPropertyGridEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.PropertyGrid _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.PropertyGrid"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxPropertyGridEvents(global::Wisej.Web.PropertyGrid data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.NameFillWeightChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> NameFillWeightChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NameFillWeightChanged += x, x => _data.NameFillWeightChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.PropertySortChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PropertySortChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertySortChanged += x, x => _data.PropertySortChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.PropertyValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PropertyValueChangedEventArgs> PropertyValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PropertyValueChangedEventHandler, global::Wisej.Web.PropertyValueChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PropertyValueChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyValueChanged += x, x => _data.PropertyValueChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.PropertyValueDataError"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PropertyValueDataErrorEventArgs> PropertyValueDataError => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PropertyValueDataErrorEventHandler, global::Wisej.Web.PropertyValueDataErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PropertyValueDataErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyValueDataError += x, x => _data.PropertyValueDataError -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.PropertyValueFormatting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PropertyValueFormattingEventArgs> PropertyValueFormatting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PropertyValueFormattingEventHandler, global::Wisej.Web.PropertyValueFormattingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PropertyValueFormattingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PropertyValueFormatting += x, x => _data.PropertyValueFormatting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.SelectedGridItemBeginEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SelectedGridItemBeginEditEventArgs> SelectedGridItemBeginEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SelectedGridItemBeginEditEventHandler, global::Wisej.Web.SelectedGridItemBeginEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SelectedGridItemBeginEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedGridItemBeginEdit += x, x => _data.SelectedGridItemBeginEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.SelectedGridItemChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SelectedGridItemChangedEventArgs> SelectedGridItemChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SelectedGridItemChangedEventHandler, global::Wisej.Web.SelectedGridItemChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SelectedGridItemChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedGridItemChanged += x, x => _data.SelectedGridItemChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.SelectedGridItemEndEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SelectedGridItemEndEditEventArgs> SelectedGridItemEndEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SelectedGridItemEndEditEventHandler, global::Wisej.Web.SelectedGridItemEndEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SelectedGridItemEndEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedGridItemEndEdit += x, x => _data.SelectedGridItemEndEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.SelectedObjectsChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedObjectsChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedObjectsChanged += x, x => _data.SelectedObjectsChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.ToolbarButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolBarButtonClickEventArgs> ToolbarButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolBarButtonClickEventHandler, global::Wisej.Web.ToolBarButtonClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolBarButtonClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolbarButtonClick += x, x => _data.ToolbarButtonClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.ToolbarButtonDropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolBarButtonClickEventArgs> ToolbarButtonDropDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolBarButtonClickEventHandler, global::Wisej.Web.ToolBarButtonClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolBarButtonClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolbarButtonDropDown += x, x => _data.ToolbarButtonDropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.PropertyGrid.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.RadioButton"/> class as observables.
    /// </summary>
    public class RxRadioButtonEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.RadioButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.RadioButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxRadioButtonEvents(global::Wisej.Web.RadioButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.RadioButton.AppearanceChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AppearanceChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AppearanceChanged += x, x => _data.AppearanceChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.RadioButton.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.RadioButton.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ScrollableControl"/> class as observables.
    /// </summary>
    public class RxScrollableControlEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ScrollableControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ScrollableControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollableControlEvents(global::Wisej.Web.ScrollableControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollableControl.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ScrollBar"/> class as observables.
    /// </summary>
    public class RxScrollBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ScrollBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ScrollBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxScrollBarEvents(global::Wisej.Web.ScrollBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ScrollBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Shape"/> class as observables.
    /// </summary>
    public class RxShapeEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Shape _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Shape"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxShapeEvents(global::Wisej.Web.Shape data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Shape.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.SlideBar"/> class as observables.
    /// </summary>
    public class RxSlideBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.SlideBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.SlideBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSlideBarEvents(global::Wisej.Web.SlideBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.OrientationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OrientationChanged += x, x => _data.OrientationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.ScrollAnimationEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollAnimationEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScrollAnimationEnd += x, x => _data.ScrollAnimationEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.ScrollStepChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollStepChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScrollStepChanged += x, x => _data.ScrollStepChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.SpacingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SpacingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SpacingChanged += x, x => _data.SpacingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SlideBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Spacer"/> class as observables.
    /// </summary>
    public class RxSpacerEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Spacer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Spacer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSpacerEvents(global::Wisej.Web.Spacer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Appear"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Appear => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Appear += x, x => _data.Appear -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.ContextMenuChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ContextMenuChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ContextMenuChanged += x, x => _data.ContextMenuChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.CursorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CursorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CursorChanged += x, x => _data.CursorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Disappear"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Disappear => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Disappear += x, x => _data.Disappear -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragDrop"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragDrop => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragDrop += x, x => _data.DragDrop -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnd += x, x => _data.DragEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragEnter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragEnter => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragEnter += x, x => _data.DragEnter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragLeave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragLeave += x, x => _data.DragLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragOver"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.DragEventArgs> DragOver => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.DragEventHandler, global::Wisej.Web.DragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.DragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragOver += x, x => _data.DragOver -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.DragStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DragStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DragStart += x, x => _data.DragStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.EnabledChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EnabledChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EnabledChanged += x, x => _data.EnabledChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Enter"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Enter => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Enter += x, x => _data.Enter -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Leave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Leave => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Leave += x, x => _data.Leave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.LongTap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LongTap => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LongTap += x, x => _data.LongTap -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseCaptureChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MouseCaptureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseCaptureChanged += x, x => _data.MouseCaptureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDown += x, x => _data.MouseDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseHover += x, x => _data.MouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseLeave += x, x => _data.MouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseMove => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseMove += x, x => _data.MouseMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseUp += x, x => _data.MouseUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.MouseWheel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseWheel => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseWheel += x, x => _data.MouseWheel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Pinch"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PinchEventArgs> Pinch => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PinchEventHandler, global::Wisej.Web.PinchEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PinchEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Pinch += x, x => _data.Pinch -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.PreviewKeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PreviewKeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PreviewKeyDown += x, x => _data.PreviewKeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.QueryContinueDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.QueryContinueDragEventArgs> QueryContinueDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.QueryContinueDragEventHandler, global::Wisej.Web.QueryContinueDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.QueryContinueDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.QueryContinueDrag += x, x => _data.QueryContinueDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Rotate"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.RotateEventArgs> Rotate => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.RotateEventHandler, global::Wisej.Web.RotateEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.RotateEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Rotate += x, x => _data.Rotate -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.StyleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> StyleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.StyleChanged += x, x => _data.StyleChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Tap"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tap => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tap += x, x => _data.Tap -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TouchCancel"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchCancel => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchCancel += x, x => _data.TouchCancel -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TouchEnd"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchEnd += x, x => _data.TouchEnd -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TouchMove"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchMove => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchMove += x, x => _data.TouchMove -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.TouchStart"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TouchStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TouchStart += x, x => _data.TouchStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Track"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Track => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Track += x, x => _data.Track -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Spacer.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.SplitContainer"/> class as observables.
    /// </summary>
    public class RxSplitContainerEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.SplitContainer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.SplitContainer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitContainerEvents(global::Wisej.Web.SplitContainer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.ControlAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlAdded += x, x => _data.ControlAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.ControlRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ControlEventArgs> ControlRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ControlEventHandler, global::Wisej.Web.ControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ControlRemoved += x, x => _data.ControlRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.OrientationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> OrientationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.OrientationChanged += x, x => _data.OrientationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ScrollEventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ScrollEventHandler, global::Wisej.Web.ScrollEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ScrollEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.SplitterMoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SplitterEventArgs> SplitterMoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SplitterEventHandler, global::Wisej.Web.SplitterEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SplitterEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoved += x, x => _data.SplitterMoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.SplitterMoving"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.SplitterCancelEventArgs> SplitterMoving => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.SplitterCancelEventHandler, global::Wisej.Web.SplitterCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.SplitterCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SplitterMoving += x, x => _data.SplitterMoving -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitContainer.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.SplitterPanel"/> class as observables.
    /// </summary>
    public class RxSplitterPanelEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.SplitterPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.SplitterPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxSplitterPanelEvents(global::Wisej.Web.SplitterPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.SplitterPanel.VisibleChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> VisibleChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.VisibleChanged += x, x => _data.VisibleChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.StatusBar"/> class as observables.
    /// </summary>
    public class RxStatusBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.StatusBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.StatusBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStatusBarEvents(global::Wisej.Web.StatusBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.StatusBar.PanelClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.StatusBarPanelClickEventArgs> PanelClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.StatusBarPanelClickEventHandler, global::Wisej.Web.StatusBarPanelClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.StatusBarPanelClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelClick += x, x => _data.PanelClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.StatusBarPanel"/> class as observables.
    /// </summary>
    public class RxStatusBarPanelEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.StatusBarPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.StatusBarPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxStatusBarPanelEvents(global::Wisej.Web.StatusBarPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.StatusBarPanel.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TabControl"/> class as observables.
    /// </summary>
    public class RxTabControlEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.TabControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TabControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTabControlEvents(global::Wisej.Web.TabControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.Deselected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlEventArgs> Deselected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlEventHandler, global::Wisej.Web.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselected += x, x => _data.Deselected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.Deselecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlCancelEventArgs> Deselecting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlCancelEventHandler, global::Wisej.Web.TabControlCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Deselecting += x, x => _data.Deselecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.Paint"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.PaintEventArgs> Paint => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.PaintEventHandler, global::Wisej.Web.PaintEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.PaintEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Paint += x, x => _data.Paint -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.ScrollStepChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ScrollStepChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ScrollStepChanged += x, x => _data.ScrollStepChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.Selected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlEventArgs> Selected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlEventHandler, global::Wisej.Web.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selected += x, x => _data.Selected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.SelectedIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SelectedIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SelectedIndexChanged += x, x => _data.SelectedIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.Selecting"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlCancelEventArgs> Selecting => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlCancelEventHandler, global::Wisej.Web.TabControlCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Selecting += x, x => _data.Selecting -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.TabClosed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlEventArgs> TabClosed => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlEventHandler, global::Wisej.Web.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabClosed += x, x => _data.TabClosed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.TabClosing"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlCancelEventArgs> TabClosing => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlCancelEventHandler, global::Wisej.Web.TabControlCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabClosing += x, x => _data.TabClosing -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.TabVisibilityChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TabControlEventArgs> TabVisibilityChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TabControlEventHandler, global::Wisej.Web.TabControlEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TabControlEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabVisibilityChanged += x, x => _data.TabVisibilityChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TableLayoutPanel"/> class as observables.
    /// </summary>
    public class RxTableLayoutPanelEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.TableLayoutPanel _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TableLayoutPanel"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTableLayoutPanelEvents(global::Wisej.Web.TableLayoutPanel data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TableLayoutPanel.RightToLeftLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftLayoutChanged += x, x => _data.RightToLeftLayoutChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TabPage"/> class as observables.
    /// </summary>
    public class RxTabPageEvents : global::Wisej.Web.RxPanelEvents
    {
        private readonly global::Wisej.Web.TabPage _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TabPage"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTabPageEvents(global::Wisej.Web.TabPage data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.DockChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DockChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DockChanged += x, x => _data.DockChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.LocationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> LocationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.LocationChanged += x, x => _data.LocationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.PanelCollapsed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelCollapsed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelCollapsed += x, x => _data.PanelCollapsed -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.PanelExpanded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PanelExpanded => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PanelExpanded += x, x => _data.PanelExpanded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.TabIndexChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabIndexChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabIndexChanged += x, x => _data.TabIndexChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.TabStopChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TabStopChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TabStopChanged += x, x => _data.TabStopChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TabPage.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TagTextBox"/> class as observables.
    /// </summary>
    public class RxTagTextBoxEvents : global::Wisej.Web.RxTextBoxBaseEvents
    {
        private readonly global::Wisej.Web.TagTextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TagTextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTagTextBoxEvents(global::Wisej.Web.TagTextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.SeparatorCharChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> SeparatorCharChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.SeparatorCharChanged += x, x => _data.SeparatorCharChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagAdded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxEventArgs> TagAdded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxEventHandler, global::Wisej.Web.TagTextBoxEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagAdded += x, x => _data.TagAdded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxMousEventArgs> TagClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxMousEventHandler, global::Wisej.Web.TagTextBoxMousEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxMousEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagClick += x, x => _data.TagClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxMousEventArgs> TagDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxMousEventHandler, global::Wisej.Web.TagTextBoxMousEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxMousEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagDoubleClick += x, x => _data.TagDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagRejected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxEventArgs> TagRejected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxEventHandler, global::Wisej.Web.TagTextBoxEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagRejected += x, x => _data.TagRejected -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagRemoved"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxEventArgs> TagRemoved => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxEventHandler, global::Wisej.Web.TagTextBoxEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagRemoved += x, x => _data.TagRemoved -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagRender"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxRenderEventArgs> TagRender => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxRenderEventHandler, global::Wisej.Web.TagTextBoxRenderEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxRenderEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagRender += x, x => _data.TagRender -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TagTextBox.TagSelected"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TagTextBoxEventArgs> TagSelected => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TagTextBoxEventHandler, global::Wisej.Web.TagTextBoxEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TagTextBoxEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TagSelected += x, x => _data.TagSelected -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TextBox"/> class as observables.
    /// </summary>
    public class RxTextBoxEvents : global::Wisej.Web.RxTextBoxBaseEvents
    {
        private readonly global::Wisej.Web.TextBox _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TextBox"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxEvents(global::Wisej.Web.TextBox data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBox.CheckedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CheckedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CheckedChanged += x, x => _data.CheckedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBox.TextAlignChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextAlignChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextAlignChanged += x, x => _data.TextAlignChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TextBoxBase"/> class as observables.
    /// </summary>
    public class RxTextBoxBaseEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.TextBoxBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TextBoxBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTextBoxBaseEvents(global::Wisej.Web.TextBoxBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBoxBase.AcceptsTabChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AcceptsTabChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AcceptsTabChanged += x, x => _data.AcceptsTabChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBoxBase.ModifiedChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ModifiedChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ModifiedChanged += x, x => _data.ModifiedChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBoxBase.MultilineChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> MultilineChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MultilineChanged += x, x => _data.MultilineChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBoxBase.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TextBoxBase.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Timer"/> class as observables.
    /// </summary>
    public class RxTimerEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.Timer _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Timer"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimerEvents(global::Wisej.Web.Timer data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Timer.Tick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Tick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Tick += x, x => _data.Tick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TimeUpDown"/> class as observables.
    /// </summary>
    public class RxTimeUpDownEvents : global::Wisej.Web.RxUpDownBaseEvents
    {
        private readonly global::Wisej.Web.TimeUpDown _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TimeUpDown"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTimeUpDownEvents(global::Wisej.Web.TimeUpDown data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TimeUpDown.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TimeUpDown.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TimeUpDown.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Toast"/> class as observables.
    /// </summary>
    public class RxToastEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.Toast _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Toast"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToastEvents(global::Wisej.Web.Toast data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Toast.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Toast.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ToolBar"/> class as observables.
    /// </summary>
    public class RxToolBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.ToolBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ToolBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolBarEvents(global::Wisej.Web.ToolBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.ButtonClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolBarButtonClickEventArgs> ButtonClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolBarButtonClickEventHandler, global::Wisej.Web.ToolBarButtonClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolBarButtonClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ButtonClick += x, x => _data.ButtonClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.ButtonDropDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolBarButtonClickEventArgs> ButtonDropDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolBarButtonClickEventHandler, global::Wisej.Web.ToolBarButtonClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolBarButtonClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ButtonDropDown += x, x => _data.ButtonDropDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.ToolBarButton"/> class as observables.
    /// </summary>
    public class RxToolBarButtonEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.ToolBarButton _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.ToolBarButton"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxToolBarButtonEvents(global::Wisej.Web.ToolBarButton data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.ToolBarButton.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TrackBar"/> class as observables.
    /// </summary>
    public class RxTrackBarEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.TrackBar _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TrackBar"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTrackBarEvents(global::Wisej.Web.TrackBar data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.Click"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Click => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Click += x, x => _data.Click -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.DoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> DoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DoubleClick += x, x => _data.DoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.MouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseClick += x, x => _data.MouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.MouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.MouseEventArgs> MouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.MouseEventHandler, global::Wisej.Web.MouseEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.MouseEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.MouseDoubleClick += x, x => _data.MouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.Scroll"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Scroll => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Scroll += x, x => _data.Scroll -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TrackBar.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TreeNode"/> class as observables.
    /// </summary>
    public class RxTreeNodeEvents : global::Wisej.Base.RxComponentEvents
    {
        private readonly global::Wisej.Web.TreeNode _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TreeNode"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeNodeEvents(global::Wisej.Web.TreeNode data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.AfterCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCheck += x, x => _data.AfterCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.AfterCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCollapse += x, x => _data.AfterCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.AfterExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterExpand => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterExpand += x, x => _data.AfterExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.NodeLabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.NodeLabelEditEventHandler, global::Wisej.Web.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.AfterSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterSelect => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterSelect += x, x => _data.AfterSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.BeforeCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCheck += x, x => _data.BeforeCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.BeforeCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCollapse += x, x => _data.BeforeCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.BeforeExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeExpand => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeExpand += x, x => _data.BeforeExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.NodeLabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.NodeLabelEditEventHandler, global::Wisej.Web.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.BeforeSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeSelect => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeSelect += x, x => _data.BeforeSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.ItemDrag"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("This event is deprecated. Use NodeDrag instead.", false)]
        public global::System.IObservable<global::Wisej.Web.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemDragEventHandler, global::Wisej.Web.ItemDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDrag += x, x => _data.ItemDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.NodeDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewNodeDragEventArgs> NodeDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewNodeDragEventHandler, global::Wisej.Web.TreeViewNodeDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewNodeDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeDrag += x, x => _data.NodeDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.NodeMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseClickEventArgs> NodeMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseClickEventHandler, global::Wisej.Web.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseClick += x, x => _data.NodeMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.NodeMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseClickEventArgs> NodeMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseClickEventHandler, global::Wisej.Web.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseDoubleClick += x, x => _data.NodeMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.NodeMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseHoverEventArgs> NodeMouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseHoverEventHandler, global::Wisej.Web.TreeNodeMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseHover += x, x => _data.NodeMouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeNode.NodeMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseHoverEventArgs> NodeMouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseHoverEventHandler, global::Wisej.Web.TreeNodeMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseLeave += x, x => _data.NodeMouseLeave -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.TreeView"/> class as observables.
    /// </summary>
    public class RxTreeViewEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.TreeView _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.TreeView"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxTreeViewEvents(global::Wisej.Web.TreeView data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.AfterCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCheck += x, x => _data.AfterCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.AfterCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterCollapse += x, x => _data.AfterCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.AfterExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterExpand => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterExpand += x, x => _data.AfterExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.AfterLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.NodeLabelEditEventArgs> AfterLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.NodeLabelEditEventHandler, global::Wisej.Web.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterLabelEdit += x, x => _data.AfterLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.AfterSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewEventArgs> AfterSelect => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewEventHandler, global::Wisej.Web.TreeViewEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AfterSelect += x, x => _data.AfterSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BeforeCheck"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeCheck => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCheck += x, x => _data.BeforeCheck -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BeforeCollapse"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeCollapse => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeCollapse += x, x => _data.BeforeCollapse -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BeforeExpand"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeExpand => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeExpand += x, x => _data.BeforeExpand -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BeforeLabelEdit"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.NodeLabelEditEventArgs> BeforeLabelEdit => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.NodeLabelEditEventHandler, global::Wisej.Web.NodeLabelEditEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.NodeLabelEditEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeLabelEdit += x, x => _data.BeforeLabelEdit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.BeforeSelect"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewCancelEventArgs> BeforeSelect => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewCancelEventHandler, global::Wisej.Web.TreeViewCancelEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewCancelEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BeforeSelect += x, x => _data.BeforeSelect -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.ItemDrag"/> event triggers.
        /// </summary>
        [global::System.ObsoleteAttribute("This event is deprecated. Use NodeDrag instead.", false)]
        public global::System.IObservable<global::Wisej.Web.ItemDragEventArgs> ItemDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ItemDragEventHandler, global::Wisej.Web.ItemDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ItemDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ItemDrag += x, x => _data.ItemDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.NodeDrag"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeViewNodeDragEventArgs> NodeDrag => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeViewNodeDragEventHandler, global::Wisej.Web.TreeViewNodeDragEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeViewNodeDragEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeDrag += x, x => _data.NodeDrag -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.NodeMouseClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseClickEventArgs> NodeMouseClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseClickEventHandler, global::Wisej.Web.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseClick += x, x => _data.NodeMouseClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.NodeMouseDoubleClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseClickEventArgs> NodeMouseDoubleClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseClickEventHandler, global::Wisej.Web.TreeNodeMouseClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseDoubleClick += x, x => _data.NodeMouseDoubleClick -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.NodeMouseHover"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseHoverEventArgs> NodeMouseHover => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseHoverEventHandler, global::Wisej.Web.TreeNodeMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseHover += x, x => _data.NodeMouseHover -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.NodeMouseLeave"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.TreeNodeMouseHoverEventArgs> NodeMouseLeave => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.TreeNodeMouseHoverEventHandler, global::Wisej.Web.TreeNodeMouseHoverEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.TreeNodeMouseHoverEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.NodeMouseLeave += x, x => _data.NodeMouseLeave -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.PaddingChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> PaddingChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.PaddingChanged += x, x => _data.PaddingChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.TreeView.ToolClick"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.ToolClickEventArgs> ToolClick => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ToolClickEventHandler, global::Wisej.Web.ToolClickEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ToolClickEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ToolClick += x, x => _data.ToolClick -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.UpDownBase"/> class as observables.
    /// </summary>
    public class RxUpDownBaseEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.UpDownBase _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.UpDownBase"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUpDownBaseEvents(global::Wisej.Web.UpDownBase data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UpDownBase.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UpDownBase.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UpDownBase.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UpDownBase.EditableChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> EditableChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.EditableChanged += x, x => _data.EditableChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UpDownBase.ReadOnlyChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ReadOnlyChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ReadOnlyChanged += x, x => _data.ReadOnlyChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Upload"/> class as observables.
    /// </summary>
    public class RxUploadEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Upload _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Upload"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUploadEvents(global::Wisej.Web.Upload data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Upload.Error"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.UploadErrorEventArgs> Error => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.UploadErrorEventHandler, global::Wisej.Web.UploadErrorEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.UploadErrorEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Error += x, x => _data.Error -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Upload.Progress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.UploadProgressEventArgs> Progress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.UploadProgressEventHandler, global::Wisej.Web.UploadProgressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.UploadProgressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Progress += x, x => _data.Progress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Upload.Uploaded"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.UploadedEventArgs> Uploaded => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.UploadedEventHandler, global::Wisej.Web.UploadedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.UploadedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Uploaded += x, x => _data.Uploaded -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Upload.Uploading"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.UploadingEventArgs> Uploading => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.UploadingEventHandler, global::Wisej.Web.UploadingEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.UploadingEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Uploading += x, x => _data.Uploading -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Upload.ValueChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ValueChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ValueChanged += x, x => _data.ValueChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.UserControl"/> class as observables.
    /// </summary>
    public class RxUserControlEvents : global::Wisej.Web.RxContainerControlEvents
    {
        private readonly global::Wisej.Web.UserControl _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.UserControl"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserControlEvents(global::Wisej.Web.UserControl data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UserControl.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UserControl.AutoValidateChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoValidateChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoValidateChanged += x, x => _data.AutoValidateChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UserControl.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UserControl.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.UserPopup"/> class as observables.
    /// </summary>
    public class RxUserPopupEvents : global::Wisej.Web.RxUserControlEvents
    {
        private readonly global::Wisej.Web.UserPopup _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.UserPopup"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxUserPopupEvents(global::Wisej.Web.UserPopup data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.UserPopup.Closed"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Closed => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Closed += x, x => _data.Closed -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.WebBrowser"/> class as observables.
    /// </summary>
    public class RxWebBrowserEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.WebBrowser _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.WebBrowser"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWebBrowserEvents(global::Wisej.Web.WebBrowser data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.AutoSizeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> AutoSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.AutoSizeChanged += x, x => _data.AutoSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.BackColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackColorChanged += x, x => _data.BackColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.BackgroundImageChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageChanged += x, x => _data.BackgroundImageChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.BackgroundImageLayoutChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> BackgroundImageLayoutChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.BackgroundImageLayoutChanged += x, x => _data.BackgroundImageLayoutChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.CausesValidationChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> CausesValidationChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.CausesValidationChanged += x, x => _data.CausesValidationChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.DocumentCompleted"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.WebBrowserDocumentCompletedEventArgs> DocumentCompleted => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.WebBrowserDocumentCompletedEventHandler, global::Wisej.Web.WebBrowserDocumentCompletedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.WebBrowserDocumentCompletedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.DocumentCompleted += x, x => _data.DocumentCompleted -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.FontChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> FontChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.FontChanged += x, x => _data.FontChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.ForeColorChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ForeColorChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ForeColorChanged += x, x => _data.ForeColorChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.ImeModeChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> ImeModeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.ImeModeChanged += x, x => _data.ImeModeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.KeyDown"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyDown => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyDown += x, x => _data.KeyDown -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.KeyPress"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyPressEventArgs> KeyPress => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyPressEventHandler, global::Wisej.Web.KeyPressEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyPressEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyPress += x, x => _data.KeyPress -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.KeyUp"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.KeyEventArgs> KeyUp => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.KeyEventHandler, global::Wisej.Web.KeyEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.KeyEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.KeyUp += x, x => _data.KeyUp -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.RightToLeftChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> RightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.RightToLeftChanged += x, x => _data.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.TextChanged"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> TextChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.TextChanged += x, x => _data.TextChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.WebBrowser.Validated"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Validated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Validated += x, x => _data.Validated -= x);
    }

    /// <summary>
    /// A class which wraps the events contained within the <see cref = "global::Wisej.Web.Widget"/> class as observables.
    /// </summary>
    public class RxWidgetEvents : global::Wisej.Web.RxControlEvents
    {
        private readonly global::Wisej.Web.Widget _data;
        /// <summary>
        /// Initializes a new instance of the <see cref = "global::Wisej.Web.Widget"/> class.
        /// </summary>
        /// <param name = "data">The class that is being wrapped.</param>
        public RxWidgetEvents(global::Wisej.Web.Widget data): base(data)
        {
            _data = data;
        }

        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Widget.Load"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::System.EventArgs> Load => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.Load += x, x => _data.Load -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Widget.WebRequest"/> event triggers.
        /// </summary>
        public global::System.IObservable<global::Wisej.Web.WebRequestEventArgs> WebRequest => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.WebRequestHandler, global::Wisej.Web.WebRequestEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.WebRequestEventArgs e) => eventHandler(e);
            return Handler;
        }, x => _data.WebRequest += x, x => _data.WebRequest -= x);
    }
}

namespace Wisej.Web
{
    /// <summary>
    /// A class that contains extension methods to wrap events contained within static classes within the <see cref = "Wisej.Web"/> namespace.
    /// </summary>
    public static class Events
    {
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ActiveWindowChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationActiveWindowChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ActiveWindowChanged += x, x => global::Wisej.Web.Application.ActiveWindowChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ApplicationExit"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationApplicationExit => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ApplicationExit += x, x => global::Wisej.Web.Application.ApplicationExit -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ApplicationRefresh"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationApplicationRefresh => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ApplicationRefresh += x, x => global::Wisej.Web.Application.ApplicationRefresh -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ApplicationStart"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationApplicationStart => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ApplicationStart += x, x => global::Wisej.Web.Application.ApplicationStart -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.BeforeInstallPrompt"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationBeforeInstallPrompt => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.BeforeInstallPrompt += x, x => global::Wisej.Web.Application.BeforeInstallPrompt -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.BeginRequest"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationBeginRequest => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.BeginRequest += x, x => global::Wisej.Web.Application.BeginRequest -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.BrowserSizeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationBrowserSizeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.BrowserSizeChanged += x, x => global::Wisej.Web.Application.BrowserSizeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.BrowserTabActivated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationBrowserTabActivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.BrowserTabActivated += x, x => global::Wisej.Web.Application.BrowserTabActivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.BrowserTabDeactivated"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationBrowserTabDeactivated => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.BrowserTabDeactivated += x, x => global::Wisej.Web.Application.BrowserTabDeactivated -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.CultureChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationCultureChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.CultureChanged += x, x => global::Wisej.Web.Application.CultureChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.EndRequest"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationEndRequest => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.EndRequest += x, x => global::Wisej.Web.Application.EndRequest -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.EnterThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationEnterThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.EnterThreadModal += x, x => global::Wisej.Web.Application.EnterThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.FocusedControlChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationFocusedControlChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.FocusedControlChanged += x, x => global::Wisej.Web.Application.FocusedControlChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.HashChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Wisej.Web.HashChangedEventArgs> ApplicationHashChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.HashChangedEventHandler, global::Wisej.Web.HashChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.HashChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.HashChanged += x, x => global::Wisej.Web.Application.HashChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.Idle"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationIdle => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.Idle += x, x => global::Wisej.Web.Application.Idle -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.LeaveThreadModal"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationLeaveThreadModal => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.LeaveThreadModal += x, x => global::Wisej.Web.Application.LeaveThreadModal -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ResponsiveProfileChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::Wisej.Web.ResponsiveProfileChangedEventArgs> ApplicationResponsiveProfileChanged => global::System.Reactive.Linq.Observable.FromEvent<global::Wisej.Web.ResponsiveProfileChangedEventHandler, global::Wisej.Web.ResponsiveProfileChangedEventArgs>(eventHandler =>
        {
            void Handler(object sender, global::Wisej.Web.ResponsiveProfileChangedEventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ResponsiveProfileChanged += x, x => global::Wisej.Web.Application.ResponsiveProfileChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.RightToLeftChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationRightToLeftChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.RightToLeftChanged += x, x => global::Wisej.Web.Application.RightToLeftChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ThemeChanged"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationThemeChanged => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ThemeChanged += x, x => global::Wisej.Web.Application.ThemeChanged -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ThreadBegin"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationThreadBegin => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ThreadBegin += x, x => global::Wisej.Web.Application.ThreadBegin -= x);
        /// <summary>
        /// Gets an observable which signals when the <see cref = "global::Wisej.Web.Application.ThreadEnd"/> event triggers.
        /// </summary>
        public static global::System.IObservable<global::System.EventArgs> ApplicationThreadEnd => global::System.Reactive.Linq.Observable.FromEvent<global::System.EventHandler, global::System.EventArgs>(eventHandler =>
        {
            void Handler(object sender, global::System.EventArgs e) => eventHandler(e);
            return Handler;
        }, x => global::Wisej.Web.Application.ThreadEnd += x, x => global::Wisej.Web.Application.ThreadEnd -= x);
    }
}